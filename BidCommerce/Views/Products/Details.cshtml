@model BidCommerce.Models.Product
@{
    ViewData["Title"] = Model.Title;
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<link rel="stylesheet" href="~/css/details-products.css" />

<div class="product-details-container">
    <div class="product-main">
        <!-- Left Side - Images -->
        <div class="product-images">
            <div class="main-image">
                @{
                    var imageUrl = "/images/placeholder-product.jpg";
                    var imageUrls = new List<string>();

                    if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        imageUrls = Model.ImageUrl.Split(',').ToList();
                        imageUrl = imageUrls.First();
                    }
                    else
                    {
                        imageUrls.Add(imageUrl);
                    }
                }
                <img src="@imageUrl" alt="@Model.Title" id="mainProductImage" />
            </div>

            @if (imageUrls.Count > 1)
            {
                <div class="thumbnail-images">
                    @for (int i = 0; i < imageUrls.Count && i < 4; i++)
                    {
                        <div class="thumbnail @(i == 0 ? "active" : "")" onclick="changeMainImage('@imageUrls[i]', this)">
                            <img src="@imageUrls[i]" alt="@Model.Title view @(i + 1)" />
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Right Side - Product Info -->
        <div class="product-info">
            <div class="product-header">
                <h1 class="product-title">@Model.Title</h1>
                <div class="product-category">@Model.Category?.Name</div>
            </div>

            <!-- Pricing Section -->
            <div class="pricing-section">
                @if (Model.IsBiddable)
                {
                    <div class="current-bid">
                        <span class="bid-label">Current bid</span>
                        <div class="bid-amount" id="currentBid">
                            $@((Model.CurrentBid ?? Model.StartingPrice ?? 0).ToString("N0"))
                        </div>
                        <span class="bid-count">@(new Random(Model.Id).Next(1, 20)) bids</span>
                    </div>

                    @if (Model.BidEndTime.HasValue)
                    {
                        var timeLeft = Model.BidEndTime.Value - DateTime.Now;
                        <div class="time-left">
                            @if (timeLeft.TotalHours > 24)
                            {
                                <span class="time-value">@((int)timeLeft.TotalDays)d @((int)timeLeft.Hours)h left</span>
                            }
                            else if (timeLeft.TotalHours >= 1)
                            {
                                <span class="time-value">@((int)timeLeft.TotalHours)h @((int)timeLeft.Minutes)m left</span>
                            }
                            else if (timeLeft.TotalMinutes > 0)
                            {
                                <span class="time-value">@((int)timeLeft.TotalMinutes)m left</span>
                            }
                            else
                            {
                                <span class="time-value ended">Auction Ended</span>
                            }
                        </div>
                    }

                    @if (Model.BuyNowPrice.HasValue)
                    {
                        <div class="buy-now-section">
                            <span class="buy-now-label">or Buy It Now</span>
                            <div class="buy-now-price">$@Model.BuyNowPrice.Value.ToString("N0")</div>
                        </div>
                    }
                }
                else
                {
                    <div class="fixed-price">
                        <span class="price-label">Price</span>
                        <div class="price-amount">$@((Model.BuyNowPrice ?? Model.StartingPrice ?? 0).ToString("N0"))</div>
                    </div>
                }
            </div>

            <!-- Bidding/Purchase Section -->
            <div class="action-section">
                @Html.AntiForgeryToken()
                @if (Model.IsBiddable && Model.BidEndTime.HasValue && Model.BidEndTime.Value > DateTime.Now)
                {
                    <div class="bidding-form">
                        <label for="bidAmount">Enter your maximum bid</label>
                        <div class="bid-input-group">
                            <span class="currency">$</span>
                            <input type="number" id="bidAmount" class="bid-input"
                                   min="@((Model.CurrentBid ?? Model.StartingPrice ?? 0) + 1)"
                                   placeholder="@((Model.CurrentBid ?? Model.StartingPrice ?? 0) + 1)" />
                        </div>
                        <button class="btn-place-bid" onclick="placeBid()">Place Bid</button>
                    </div>
                }

                @if (Model.BuyNowPrice.HasValue)
                {
                    <button class="btn-buy-now" onclick="buyNow(@Model.Id)">Buy Now</button>
                }
            </div>

            <!-- Shipping & Info -->
            <div class="shipping-info">
                <div class="shipping-row">
                    <span class="label">Shipping:</span>
                    <span class="value">Free</span>
                </div>
                <div class="shipping-row">
                    <span class="label">Item location:</span>
                    <span class="value">New York, NY</span>
                </div>
                <div class="shipping-row">
                    <span class="label">Delivery:</span>
                    <span class="value">3-5 business days</span>
                </div>
            </div>

            <!-- Guarantees -->
            <div class="guarantees">
                <div class="guarantee-item">
                    <i class="bi bi-shield-check"></i>
                    <span>Buyer Protection</span>
                </div>
                <div class="guarantee-item">
                    <i class="bi bi-arrow-return-left"></i>
                    <span>Returns Accepted</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Seller Information -->
    <div class="seller-section">
        <div class="seller-info">
            <h3>Seller Information</h3>

            <div class="seller-details">
                @if (!string.IsNullOrEmpty(Model.Owner?.PhotoFileName))
                {
                    <img class="seller-photo" src="/images/profiles/@Model.Owner.PhotoFileName" alt="Seller Photo" />
                }
                else
                {
                    <img class="seller-photo" src="/images/default-profile.jpg" alt="Seller Photo" />
                }

                @if (Model.Owner != null)
                {
                    <div class="seller-name">
                        <a href="@Url.Action("Seller", "Profile", new { id = Model.Owner.Id })">
                            @Model.Owner.FirstName @Model.Owner.LastName
                        </a>
                    </div>
                }
                else
                {
                    <div class="seller-name">Anonymous Seller</div>
                }

                <div class="seller-country">
                    From: @(Model.Owner?.Country ?? "Unknown")
                </div>
                <div class="seller-joined">
                    Member since: @(Model.Owner?.RegisteredAt.ToString("MMMM yyyy") ?? "N/A")
                </div>
                <div class="seller-rating">
                    <div class="rating-stars">
                        @for (int i = 0; i < 5; i++)
                        {
                            if (i < Math.Floor(Model.Owner?.AverageRating ?? 0))
                            {
                                <i class="bi bi-star-fill"></i>
                            }
                            else
                            {
                                <i class="bi bi-star"></i>
                            }
                        }
                        <span class="rating-number">@((Model.Owner?.AverageRating ?? 0).ToString("0.0"))</span>
                    </div>
                    <div class="seller-stats">
                        <span>@(Model.Owner?.TotalProductsSold ?? 0) items sold</span>
                        <span>@(Model.Owner?.TotalRatingsCount ?? 0) ratings</span>
                    </div>
                </div>
            </div>

            <!-- Recent Bids (for auctions) -->
            @if (Model.IsBiddable)
            {
                <div class="recent-bids">
                    <h3>Recent Bids</h3>
                    <div class="bids-list">
                        @{
                            var random = new Random(Model.Id);
                            var currentBid = Model.CurrentBid ?? Model.StartingPrice ?? 0;
                            var bids = new List<(decimal amount, string time, string bidder)>();

                            for (int i = 0; i < 5; i++)
                            {
                                var bidAmount = currentBid - (i * random.Next(50, 200));
                                var timeAgo = random.Next(1, 48);
                                var bidderName = $"bidder_{random.Next(100, 999)}";
                                bids.Add((bidAmount, $"{timeAgo}h ago", bidderName));
                            }
                        }

                        @foreach (var bid in bids)
                        {
                            <div class="bid-item">
                                <span class="bid-amount">$@bid.amount.ToString("N0")</span>
                                <span class="bid-time">@bid.time</span>
                                <span class="bidder">@bid.bidder</span>
                            </div>
                        }
                    </div>

                    <!-- Live Bid Messages -->
                    <div id="bidMessages" class="bid-messages"></div>
                </div>
            }
        </div>
    </div>

    <!-- Product Details Tabs -->
    <div class="product-tabs">
        <div class="tab-headers">
            <button class="tab-header active" onclick="showTab('description')">Description</button>
            <button class="tab-header" onclick="showTab('specifications')">Specifications</button>
            <button class="tab-header" onclick="showTab('shipping')">Shipping & Returns</button>
        </div>

        <div class="tab-content">
            <div id="description" class="tab-pane active">
                <h3>Description</h3>
                <p>@Model.Description</p>
            </div>
            <div id="specifications" class="tab-pane">
                <h3>Specifications</h3>
                <table>
                    <tbody>
            </div>
        </div>
    </div>
</div>

<script>
    const productId = @Model.Id;

    const connection = new signalR.HubConnectionBuilder()
        .withUrl(`/bidHub?productId=${productId}`)
        .build();

    connection.on("ReceiveBid", (user, amount, time) => {
        const bidElement = document.getElementById("currentBid");
        if (bidElement) {
            bidElement.textContent = `$${amount.toLocaleString(undefined, { minimumFractionDigits: 0 })}`;
        }

        const message = `${user} placed a bid of $${amount.toFixed(2)} at ${new Date(time).toLocaleTimeString()}`;
        const messagesContainer = document.getElementById("bidMessages");
        if (messagesContainer) {
            messagesContainer.innerHTML = `<div>${message}</div>` + messagesContainer.innerHTML;
        }

        // Optionally: you can update the recent bids list here if needed
    });

    connection.start().catch(err => console.error(err.toString()));

    async function placeBid() {
        const amount = parseFloat(document.getElementById("bidAmount").value);
        if (!amount || amount <= 0) {
            alert('Please enter a valid bid amount.');
            return;
        }

        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

        const response = await fetch('/Bids/PlaceBid', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ productId, amount })
        });

        if (!response.ok) {
            const error = await response.text();
            alert("Error: " + error);
        }
    }

    function changeMainImage(imageSrc, thumbnail) {
        document.getElementById('mainProductImage').src = imageSrc;

        document.querySelectorAll('.thumbnail').forEach(t => t.classList.remove('active'));
        thumbnail.classList.add('active');
    }

    function showTab(tabName) {
        document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
        document.querySelectorAll('.tab-header').forEach(header => header.classList.remove('active'));

        document.getElementById(tabName).classList.add('active');
        event.target.classList.add('active');
    }

    function buyNow(productId) {
        if (confirm('Are you sure you want to buy this item now?')) {
            window.location.href = `/Products/BuyNow/${productId}`;
        }
    }
</script>
