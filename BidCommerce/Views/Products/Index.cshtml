@using Microsoft.AspNetCore.Antiforgery
@model BidCommerce.ViewModels.ProductIndexViewModel
@inject IAntiforgery Antiforgery

@{
    ViewData["Title"] = "All Products";
    var userWatchlistProductIds = Model.UserWatchlistProductIds ?? new List<int>();
}

<link rel="stylesheet" href="~/css/index-products.css" />

<div class="products-container">
    <!-- Products Header -->
    <div class="products-header">
        <div>
            <h2 class="section-title">
                @if (!string.IsNullOrEmpty(Model.SelectedCategoryName))
                {
                    @Model.SelectedCategoryName
                }
                else
                {
                    @:All Products
                }
            </h2>
            <div class="items-count">@Model.Products.Count() items found</div>
        </div>
        <div class="products-controls">
            <form method="get" id="filterForm">
                @Html.AntiForgeryToken()

                <select name="categoryId" class="filter-dropdown" id="categoryFilter" onchange="submitFilters()">
                    <option value="" selected="@(Model.SelectedCategoryId == null ? "selected" : null)">All Categories</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.CategoryId" selected="@(Model.SelectedCategoryId == category.CategoryId ? "selected" : null)">
                            @category.Name
                        </option>
                    }
                </select>

                <input type="hidden" name="minPrice" id="hiddenMinPrice" value="@(Model.MinPrice?.ToString() ?? "")" />
                <input type="hidden" name="maxPrice" id="hiddenMaxPrice" value="@(Model.MaxPrice?.ToString() ?? "")" />
                <input type="hidden" name="sortBy" id="hiddenSortBy" value="@Model.SortBy" />
                <input type="hidden" name="listingType" id="hiddenListingType" value="@Model.ListingType" />
            </form>

            <button class="filter-dropdown" onclick="toggleFilters()">
                <i class="bi bi-funnel"></i> Filters
            </button>

            <select class="sort-dropdown" id="sortBy" onchange="updateSort()">
                <option value="newest" selected="@(Model.SortBy == "newest" ? "selected" : null)">Newest First</option>
                <option value="price-low" selected="@(Model.SortBy == "price-low" ? "selected" : null)">Price: Low to High</option>
                <option value="price-high" selected="@(Model.SortBy == "price-high" ? "selected" : null)">Price: High to Low</option>
                <option value="ending-soon" selected="@(Model.SortBy == "ending-soon" ? "selected" : null)">Ending Soon</option>
            </select>

            <div class="view-toggle">
                <button class="view-btn active" onclick="setView('grid')">
                    <i class="bi bi-grid"></i>
                </button>
                <button class="view-btn" onclick="setView('list')">
                    <i class="bi bi-list"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="main-content">
        <!-- Filters Sidebar -->
        <div class="filters-sidebar" id="filtersSidebar">
            <div class="filters-header">
                <span class="filters-title">Filters</span>
                <a href="@Url.Action("Index")" class="clear-filters">Clear All</a>
            </div>

            <!-- Price Range -->
            <div class="filter-section">
                <label class="filter-label">Price Range</label>
                <div class="price-range">
                    <input type="number" class="price-input" id="minPrice" placeholder="0" min="0"
                           value="@(Model.MinPrice?.ToString() ?? "")" onchange="updatePriceFilter()" />
                    <span>to</span>
                    <input type="number" class="price-input" id="maxPrice" placeholder="1000" min="0"
                           value="@(Model.MaxPrice?.ToString() ?? "")" onchange="updatePriceFilter()" />
                </div>
                <input type="range" class="price-slider" id="priceSlider" min="0" max="5000"
                       value="@(Model.MaxPrice ?? 5000)" onchange="updatePriceSlider()" />
            </div>

            <!-- Listing Type -->
            <div class="filter-section">
                <label class="filter-label">Listing Type</label>
                <div class="filter-checkbox">
                    <input type="radio" id="all-types" name="listingType" value=""
                           checked="@(string.IsNullOrEmpty(Model.ListingType) ? "checked" : null)" onchange="updateListingType()" />
                    <label for="all-types">All Types</label>
                </div>
                <div class="filter-checkbox">
                    <input type="radio" id="auction" name="listingType" value="auction"
                           checked="@(Model.ListingType == "auction" ? "checked" : null)" onchange="updateListingType()" />
                    <label for="auction">Auction</label>
                </div>
                <div class="filter-checkbox">
                    <input type="radio" id="buy-it-now" name="listingType" value="buy-it-now"
                           checked="@(Model.ListingType == "buy-it-now" ? "checked" : null)" onchange="updateListingType()" />
                    <label for="buy-it-now">Buy It Now</label>
                </div>
                <div class="filter-checkbox">
                    <input type="radio" id="both-types" name="listingType" value="both"
                           checked="@(Model.ListingType == "both" ? "checked" : null)" onchange="updateListingType()" />
                    <label for="both-types">Both Available</label>
                </div>
            </div>

            <button class="apply-filters-btn" onclick="submitFilters()">Apply Filters</button>
        </div>

        <!-- Products Grid -->
        <div class="products-grid" id="productsGrid">
            @if (Model.Products.Any())
            {
                foreach (var item in Model.Products)
                {
                    <div class="product-card" data-category="@item.Category.CategoryId" data-price="@(item.CurrentBid ?? item.StartingPrice ?? 0)" onclick="window.location.href='@Url.Action("Details", new { id = item.Id })'">
                        <div class="product-image">
                            <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/images/placeholder-product.jpg" : item.ImageUrl)"
                                 alt="@item.Title" />
                            @if (item.BidEndTime.HasValue && item.BidEndTime.Value <= DateTime.UtcNow.AddHours(24) && item.BidEndTime.Value > DateTime.UtcNow)
                            {
                                <div class="ending-soon-badge">Ending Soon</div>
                            }
                            <button class="wishlist-btn"
                                    onclick="event.stopPropagation(); toggleWishlist(@item.Id, this); return false;">
                                <i class="bi @(userWatchlistProductIds.Contains(item.Id) ? "bi-heart-fill" : "bi-heart")"></i>
                            </button>
                        </div>

                        <div class="product-info">
                            <div class="product-category">@item.Category.Name</div>
                            <h3 class="product-title">@item.Title</h3>
                            <p class="product-description">@(item.Description?.Length > 80 ? item.Description.Substring(0, 80) + "..." : item.Description)</p>
                            <div class="product-pricing">
                                @if (item.IsBiddable)
                                {
                                    <div class="current-bid">
                                        Current bid: $@((item.StartingPrice ?? 0).ToString("F2"))
                                    </div>
                                    @if (item.BuyNowPrice.HasValue)
                                    {
                                        <div class="buy-now-price">
                                            Buy now: $@item.BuyNowPrice.Value.ToString("F2")
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="current-bid">
                                        Price: $@((item.BuyNowPrice ?? item.StartingPrice ?? 0).ToString("F2"))
                                    </div>
                                }
                            </div>

                            <div class="product-stats">
                                <span><i class="bi bi-eye"></i> @(new Random().Next(5, 50)) watching</span>
                                @if (item.IsBiddable)
                                {
                                    <span><i class="bi bi-hammer"></i> @(new Random().Next(1, 20)) bids</span>
                                }
                                @if (item.BidEndTime.HasValue)
                                {
                                    var timeLeft = item.BidEndTime.Value - DateTime.UtcNow;
                                    if (timeLeft.TotalDays >= 1)
                                    {
                                        <span><i class="bi bi-clock"></i> @((int)timeLeft.TotalDays)d left</span>
                                    }
                                    else if (timeLeft.TotalHours >= 1)
                                    {
                                        <span><i class="bi bi-clock"></i> @((int)timeLeft.TotalHours)h left</span>
                                    }
                                    else if (timeLeft.TotalMinutes > 0)
                                    {
                                        <span><i class="bi bi-clock"></i> @((int)timeLeft.TotalMinutes)m left</span>
                                    }
                                    else
                                    {
                                        <span><i class="bi bi-clock"></i> Ended</span>
                                    }
                                }
                            </div>

                            <div class="product-actions">
                                @if (item.IsBiddable && item.BidEndTime.HasValue && item.BidEndTime.Value > DateTime.UtcNow)
                                {
                                    <a href="@Url.Action("Details", new { id = item.Id })" class="btn-bid" onclick="event.stopPropagation()">
                                        <i class="bi bi-hammer"></i> Bid
                                    </a>
                                }
                                @if (item.BuyNowPrice.HasValue || !item.IsBiddable)
                                {
                                    <a href="@Url.Action("BuyNow", new { id = item.Id })" class="btn-buy-now" onclick="event.stopPropagation()">
                                        <i class="bi bi-cart"></i> Buy Now
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-products-message">
                    <p>No products found matching your filters.</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script src="~/js/create-product.js"></script>
}

